{"version":3,"sources":["app-bundle.min.js","backend/module.js","about/js/about.js","account/js/account.js","backend/js/backend.js","backend/js/data-loading.js","backend/js/google-api-crawler.js","backend/js/http.js","home/js/home.js","goal/js/goal.js","landing/js/landing.js","register/js/register.js","sidemenu/js/sidemenu.js"],"names":["angular","module","controller","$scope","$stateParams","$ionicLoading","$cordovaSQLite","$ionicPlatform","user","getUserAccountDetails","console","debug","show","template","duration","hide","$on","query","execute","db","then","result","log","rows","item","username","firstname","lastname","occupation","error","$http","GoogleApiCrawlerService","api","data","search","mydata","fullDetail","q","keyword","country","results","res","key","push","service","loadFbPages","model","loadKickstarterCharities","loadPlayStoreApps","resultsCollection","keywords","name","response","forEach","app","id","appId","url","playstoreUrl","icon","price","title","summary","score","loadCommunityFeats","HttpService","http","get","baseUrl","$q","dataToURI","hasOwnProperty","encodeURIComponent","join","timeout","requestURI","deferred","defer","method","resolve","reject","promise","$state","DataService","createTile","index","getClass","click","current","this","go","goals","tiles","i","tile","tilenames","DataLoadingService","tabs","extend","fbPage","kickstarterCharities","playStoreApps","communityFeats","$ionicPopup","login","password","length","query2","query3","alert","register","$ionicHistory","query1","rowsAffected","clearCache","$ionicActionSheet"],"mappings":"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","file":"app-bundle.min.js","sourcesContent":[";(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend', []);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.aboutcontroller', [])\n\n.controller('AboutCtrl', [\"$scope\", function ($scope) {\n        \n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.accountcontroller', [])\n\n    .controller('AccountCtrl', [\"$scope\", \"$stateParams\", \"$ionicLoading\", \"$cordovaSQLite\", \"$ionicPlatform\", function ($scope, $stateParams, $ionicLoading, $cordovaSQLite, $ionicPlatform) {\n\n        $scope.user = {}\n\n        $scope.getUserAccountDetails = function () {\n            console.debug(\"Get User Account Details\");\n            $ionicLoading.show({\n                template: '<ion-spinner icon=\"lines\"></ion-spinner>',\n                duration: 2000\n            });\n            /*var firstname = localStorage.getItem(\"usr_firstname\");\n            var lastname = localStorage.getItem(\"usr_lastname\");*/\n            $ionicLoading.hide();\n        }\n        $scope.$on('$ionicView.beforeEnter', function(){\n            var query = \"SELECT * FROM user INNER JOIN current_user ON user.username = current_user.current_user\";\n            $cordovaSQLite.execute(db, query).then(function(result){\n            console.log(\"Current user: \" + result.rows.item(0).username);\n            $scope.user.firstname = result.rows.item(0).firstname;\n            $scope.user.lastname = result.rows.item(0).lastname;\n            $scope.user.occupation = result.rows.item(0).occupation;\n          }, function(error){\n                  console.log(error);\n          }) \n        })\n    }]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend')\n\n.controller('BackendCtrl', [\"$scope\", \"$ionicLoading\", \"$http\", \"GoogleApiCrawlerService\", function($scope, $ionicLoading, $http, GoogleApiCrawlerService) {\n  var api = GoogleApiCrawlerService;\n  $scope.data = {};\n  $scope.search = function() {\n    $ionicLoading.show();\n    var mydata = {\n      fullDetail: false,\n      q: $scope.data.keyword,\n      country: 'ph'\n    };\n    api\n    .query(mydata)\n    .then(function(results) {\n      $scope.data.results = results.results;\n      console.log(results);\n      var res = [];\n      for (var key in results) {\n        res.push(key);\n      }\n    })\n    .finally($ionicLoading.hide);\n  };\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend')\n\n.service('DataLoadingService', [\"GoogleApiCrawlerService\", function(GoogleApiCrawlerService) {\n\n\tfunction loadFbPages(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n\tfunction loadKickstarterCharities(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n\tfunction loadPlayStoreApps(model, resultsCollection) {\n    var keywords = model.name; // first layer\n    console.log(\"Keywords: \" + keywords);\n    return GoogleApiCrawlerService.query({\n      q: keywords // TODO: make relevance to country dynamic\n    }).then(function(response) {\n      // note: there will only be 20 results\n      var results = response.results;\n      angular.forEach(response.results, function(app) {\n        var data = {\n          id: app.appId,\n          url: app.playstoreUrl,\n          icon: app.icon,\n          price: app.price,\n          title: app.title,\n          summary: app.summary,\n          score: app.score\n        };\n        resultsCollection.push(data);\n        console.log(\"Received google store app\", data);\n      });\n    });\n\t};\n\n\tfunction loadCommunityFeats(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n  return {\n    loadFbPages: loadFbPages,\n    loadKickstarterCharities: loadKickstarterCharities,\n    loadPlayStoreApps: loadPlayStoreApps,\n    loadCommunityFeats: loadCommunityFeats\n  };\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend')\n\n.service('GoogleApiCrawlerService', [\"HttpService\", function(HttpService) {\n  var baseUrl = \"http://localhost:3000/api/apps/\";\n  var http = HttpService;\n  function query(data) {\n    return http.get(baseUrl, data);\n  };\n  function search(keywords) {\n    return http.get(baseUrl, {q: keywords});\n  };\n  return {\n    query: query,\n    search: search\n  };\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend')\n\n.service('HttpService', [\"$q\", \"$http\", function($q, $http) {\n  function dataToURI(data) {\n    var key, result = [];\n    for (key in data)\n      if (data.hasOwnProperty(key))\n        result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n    return result.join('&');\n  };\n  function get(url, data, timeout) {\n    var requestURI = url + '?' + dataToURI(data);\n    var deferred = $q.defer();\n    $http({\n      url: requestURI,\n      method: 'GET',\n      timeout: timeout || 7500\n    }).then(function(result) {\n      if (!result || !result.data)\n        deferred.reject('No response');\n      else\n        deferred.resolve(result.data);\n    }, function(error) {\n      deferred.reject(error);\n    });\n    return deferred.promise;\n  };\n  return {\n    dataToURI: dataToURI,\n    get: get\n  };\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.homecontrollers', [])\n\n.controller('HomeCtrl', [\"$scope\", \"$http\", \"$state\", \"DataService\", function($scope, $http, $state, DataService) {\n  $scope.$on('$ionicView.enter', function() {\n    $scope.current = null;\n  });\n  function createTile(index) {\n    return {\n      url: '../img/' + index + '.png',\n      getClass: function() {\n        return \"tile-show\";\n        /*\n        if ($scope.current == null) {\n          return \"tile-show\";\n        } else if ($scope.current != this) {\n          return \"tile-hide\";\n        } else {\n          return \"tile-current\";\n        }\n        */\n      },\n      click: function() {\n        if ($scope.current == null){\n          // $scope.current = this;\n          // DataService.data = $scope.current;\n          DataService.data = this;\n          console.log(\"Data\", DataService.data)\n          $state.go('sidemenu.goal');\n        }\n\n        else{\n          $scope.current = null;\n        }\n      }\n    };\n  };\n  $http.get('/json/goals.json')\n  .then(function(results) {\n    var goals = results.data;\n    $scope.tiles = [];\n    for (var i = 1; i <= 17; ++i) {\n      var tile = createTile(i);\n      tile.name = goals[i - 1].name;\n      $scope.tiles.push(tile);\n    }\n  });\n\n  $scope.tilenames = [];\n  $scope.tilenames.push(\"No Poverty\");\n  $scope.tilenames.push(\"Zero Hunger\");\n  $scope.tilenames.push(\"Good Wealth and Well-being\");\n  $scope.tilenames.push(\"Quality Education\");\n  $scope.tilenames.push(\"Gender Equality\");\n  $scope.tilenames.push(\"Clean Water and Sanitation\");\n  $scope.tilenames.push(\"Affordable and Clean Energy\");\n  $scope.tilenames.push(\"Decent Work and Economic Growth\");\n  $scope.tilenames.push(\"Industry, Innovation and Infrastructure\");\n  $scope.tilenames.push(\"Reduced Inequalities\");\n  $scope.tilenames.push(\"Sustainable Cities and Communities\");\n  $scope.tilenames.push(\"Responsible Consumption and Production\");\n  $scope.tilenames.push(\"Climate Action\");\n  $scope.tilenames.push(\"Life Below Water\");\n  $scope.tilenames.push(\"Life on Land\");\n  $scope.tilenames.push(\"Peace and Justice Strong Institutions\");\n  $scope.tilenames.push(\"Partnerships for the Goals\");\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.goalcontroller', [])\n\n.controller('GoalCtrl', [\"$scope\", \"$state\", \"$stateParams\", \"DataService\", \"DataLoadingService\", function ($scope, $state, $stateParams, DataService, DataLoadingService) {\n\n\t$scope.data = {};\n\t$scope.tabs = {};\n\n\t$scope.$on('$ionicView.beforeEnter', function() {\n\t\tif (!DataService.data || !DataService.data.name)\n\t\t\treturn $state.go('sidemenu.home');\n\t\tangular.extend($scope.data, DataService.data);\n\t\t// extend an empty set for loading later\n\t\tangular.extend($scope.tabs, {\n\t\t\tfbPage: [],\n\t\t\tkickstarterCharities: [],\n\t\t\tplayStoreApps: [],\n\t\t\tcommunityFeats: []\n\t\t});\n\t\t// load data in async\n\t\tDataLoadingService.loadFbPages($scope.data, $scope.tabs.fbPage);\n\t\tDataLoadingService.loadKickstarterCharities($scope.data, $scope.tabs.kickstarterCharities);\n\t\tDataLoadingService.loadPlayStoreApps($scope.data, $scope.tabs.playStoreApps)\n\t\t.then(function() {\n\t\t\tconsole.log($scope.tabs);\n\t\t});\n\t\tDataLoadingService.loadCommunityFeats($scope.data, $scope.tabs.communityFeats);\n\t});\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.landingcontrollers', [])\n\n.controller('LandingCtrl', [\"$scope\", \"$state\", \"$ionicLoading\", \"$cordovaSQLite\", \"$ionicPopup\", function($scope, $state, $ionicLoading, $cordovaSQLite, $ionicPopup) {\n\n\t$scope.data = {};\n\n\t$scope.login = function(){\n    $ionicLoading.show();\n\t\tvar query = \"SELECT * FROM user WHERE username = ? AND password = ?\";\n      $cordovaSQLite.execute(db, query, [$scope.data.username, $scope.data.password]).then(function(result){\n          if(result.rows.length > 0){\n            var query2 = \"DELETE FROM current_user\";\n            $cordovaSQLite.execute(db, query2);\n            var query3 = \"INSERT INTO current_user (current_user) VALUES (?)\";\n            $cordovaSQLite.execute(db, query3, [$scope.data.username]);\n            console.log(\"SELECTED -> \" + result.rows.item(0).firstname);\n            var alertPopup = $ionicPopup.alert({\n              title: 'Welcome, ' + result.rows.item(0).username\n            });\n            $ionicLoading.hide();\n            $state.go('sidemenu.home');\n          } else{\n            console.log(\"NO ROWS EXIST\"); \n            var alertPopup = $ionicPopup.alert({\n              title: 'User does not exist'\n            });\n          }\n      }, function(error){\n          console.log(error);\n     })\n\t}\n\n\t$scope.register = function(){\n\t\t$state.go('register');\n\t}\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.registercontrollers', [])\n.controller('RegisterCtrl', [\"$scope\", \"$cordovaSQLite\", \"$ionicPopup\", \"$ionicHistory\", \"$state\", function($scope, $cordovaSQLite, $ionicPopup, $ionicHistory, $state) {\n\n\t$scope.data = {};\n\n\t$scope.register = function(){\n\t\tvar query1 = \"SELECT username FROM user WHERE username = ?\";\n      $cordovaSQLite.execute(db, query1, [$scope.data.username]).then(function(result){\n        if(result.rows.length >= 1){\n          console.log(\"Record exists: \" + result.rows.item(0).username);\n          return $ionicPopup.alert({\n              title: 'User already exists. Pick another username',\n          });\n        } else{\n            var query2 = \"INSERT INTO user (username, password, firstname, lastname, occupation) VALUES (?, ?, ?, ?, ?)\";\n            $cordovaSQLite.execute(db, query2, [$scope.data.username, $scope.data.password, $scope.data.firstname, $scope.data.lastname, $scope.data.occupation]).then(function(result){\n            console.log(\"Rows affected: \" + result.rowsAffected);\n            console.log($scope.data.username + \" \" + $scope.data.password);\n            $ionicPopup.alert({\n              title: 'Registered user [' + $scope.data.username + ']'\n\t\t\t\t\t\t\t\t//' with password [' + $scope.data.password + ']'\n\t\t\t\t\t\t\t\t+ ', you may now login!'\n            }).then(function() {\n\t\t\t\t\t\t\t$state.go('landing');\n\t\t\t\t\t\t});\n            $ionicHistory.clearCache();\n      }, function(error){\n        alert(\"Error!\", error);\n        console.log(error);\n      })\n        }\n      }, function(error){\n        alert(\"Error!\", error);\n        console.log(error);\n      });\n\t}\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.sidemenucontrollers', [])\n\n.controller('SideMenuCtrl', [\"$scope\", \"$cordovaSQLite\", \"$ionicActionSheet\", \"$ionicHistory\", function($scope, $cordovaSQLite, $ionicActionSheet, $ionicHistory) {\n\t$scope.user = {};\n\n\t$scope.$on('$ionicView.beforeEnter', function(){\n\t\tvar query = \"SELECT * FROM user INNER JOIN current_user ON user.username = current_user.current_user\";\n\t\t$cordovaSQLite.execute(db, query).then(function(result){\n\t\tconsole.log(result.rows.item(0))\n\t\t$scope.user.firstname = result.rows.item(0).firstname;\n\t\t$scope.user.lastname = result.rows.item(0).lastname;\n\t\t$scope.user.username = result.rows.item(0).username;\n\t\t$scope.user.occupation = result.rows.item(0).occupation;\n\t}, function(error){\n          console.log(error);\n    })\n\n\t})\n}]);\n}());\n","angular.module('bluehacks.backend', []);\n","angular.module('bluehacks.aboutcontroller', [])\n\n.controller('AboutCtrl', function ($scope) {\n        \n});\n","angular.module('bluehacks.accountcontroller', [])\n\n    .controller('AccountCtrl', function ($scope, $stateParams, $ionicLoading, $cordovaSQLite, $ionicPlatform) {\n\n        $scope.user = {}\n\n        $scope.getUserAccountDetails = function () {\n            console.debug(\"Get User Account Details\");\n            $ionicLoading.show({\n                template: '<ion-spinner icon=\"lines\"></ion-spinner>',\n                duration: 2000\n            });\n            /*var firstname = localStorage.getItem(\"usr_firstname\");\n            var lastname = localStorage.getItem(\"usr_lastname\");*/\n            $ionicLoading.hide();\n        }\n        $scope.$on('$ionicView.beforeEnter', function(){\n            var query = \"SELECT * FROM user INNER JOIN current_user ON user.username = current_user.current_user\";\n            $cordovaSQLite.execute(db, query).then(function(result){\n            console.log(\"Current user: \" + result.rows.item(0).username);\n            $scope.user.firstname = result.rows.item(0).firstname;\n            $scope.user.lastname = result.rows.item(0).lastname;\n            $scope.user.occupation = result.rows.item(0).occupation;\n          }, function(error){\n                  console.log(error);\n          }) \n        })\n    });\n","angular.module('bluehacks.backend')\n\n.controller('BackendCtrl', function($scope, $ionicLoading, $http, GoogleApiCrawlerService) {\n  var api = GoogleApiCrawlerService;\n  $scope.data = {};\n  $scope.search = function() {\n    $ionicLoading.show();\n    var mydata = {\n      fullDetail: false,\n      q: $scope.data.keyword,\n      country: 'ph'\n    };\n    api\n    .query(mydata)\n    .then(function(results) {\n      $scope.data.results = results.results;\n      console.log(results);\n      var res = [];\n      for (var key in results) {\n        res.push(key);\n      }\n    })\n    .finally($ionicLoading.hide);\n  };\n});\n","angular.module('bluehacks.backend')\n\n.service('DataLoadingService', function(GoogleApiCrawlerService) {\n\n\tfunction loadFbPages(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n\tfunction loadKickstarterCharities(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n\tfunction loadPlayStoreApps(model, resultsCollection) {\n    var keywords = model.name; // first layer\n    console.log(\"Keywords: \" + keywords);\n    return GoogleApiCrawlerService.query({\n      q: keywords // TODO: make relevance to country dynamic\n    }).then(function(response) {\n      // note: there will only be 20 results\n      var results = response.results;\n      angular.forEach(response.results, function(app) {\n        var data = {\n          id: app.appId,\n          url: app.playstoreUrl,\n          icon: app.icon,\n          price: app.price,\n          title: app.title,\n          summary: app.summary,\n          score: app.score\n        };\n        resultsCollection.push(data);\n        console.log(\"Received google store app\", data);\n      });\n    });\n\t};\n\n\tfunction loadCommunityFeats(model, results) {\n\t\t// TODO: async loading here to results\n\t};\n\n  return {\n    loadFbPages: loadFbPages,\n    loadKickstarterCharities: loadKickstarterCharities,\n    loadPlayStoreApps: loadPlayStoreApps,\n    loadCommunityFeats: loadCommunityFeats\n  };\n\n});\n","angular.module('bluehacks.backend')\n\n.service('GoogleApiCrawlerService', function(HttpService) {\n  var baseUrl = \"http://localhost:3000/api/apps/\";\n  var http = HttpService;\n  function query(data) {\n    return http.get(baseUrl, data);\n  };\n  function search(keywords) {\n    return http.get(baseUrl, {q: keywords});\n  };\n  return {\n    query: query,\n    search: search\n  };\n});\n","angular.module('bluehacks.backend')\n\n.service('HttpService', function($q, $http) {\n  function dataToURI(data) {\n    var key, result = [];\n    for (key in data)\n      if (data.hasOwnProperty(key))\n        result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n    return result.join('&');\n  };\n  function get(url, data, timeout) {\n    var requestURI = url + '?' + dataToURI(data);\n    var deferred = $q.defer();\n    $http({\n      url: requestURI,\n      method: 'GET',\n      timeout: timeout || 7500\n    }).then(function(result) {\n      if (!result || !result.data)\n        deferred.reject('No response');\n      else\n        deferred.resolve(result.data);\n    }, function(error) {\n      deferred.reject(error);\n    });\n    return deferred.promise;\n  };\n  return {\n    dataToURI: dataToURI,\n    get: get\n  };\n});\n","angular.module('bluehacks.homecontrollers', [])\n\n.controller('HomeCtrl', function($scope, $http, $state, DataService) {\n  $scope.$on('$ionicView.enter', function() {\n    $scope.current = null;\n  });\n  function createTile(index) {\n    return {\n      url: '../img/' + index + '.png',\n      getClass: function() {\n        return \"tile-show\";\n        /*\n        if ($scope.current == null) {\n          return \"tile-show\";\n        } else if ($scope.current != this) {\n          return \"tile-hide\";\n        } else {\n          return \"tile-current\";\n        }\n        */\n      },\n      click: function() {\n        if ($scope.current == null){\n          // $scope.current = this;\n          // DataService.data = $scope.current;\n          DataService.data = this;\n          console.log(\"Data\", DataService.data)\n          $state.go('sidemenu.goal');\n        }\n\n        else{\n          $scope.current = null;\n        }\n      }\n    };\n  };\n  $http.get('/json/goals.json')\n  .then(function(results) {\n    var goals = results.data;\n    $scope.tiles = [];\n    for (var i = 1; i <= 17; ++i) {\n      var tile = createTile(i);\n      tile.name = goals[i - 1].name;\n      $scope.tiles.push(tile);\n    }\n  });\n\n  $scope.tilenames = [];\n  $scope.tilenames.push(\"No Poverty\");\n  $scope.tilenames.push(\"Zero Hunger\");\n  $scope.tilenames.push(\"Good Wealth and Well-being\");\n  $scope.tilenames.push(\"Quality Education\");\n  $scope.tilenames.push(\"Gender Equality\");\n  $scope.tilenames.push(\"Clean Water and Sanitation\");\n  $scope.tilenames.push(\"Affordable and Clean Energy\");\n  $scope.tilenames.push(\"Decent Work and Economic Growth\");\n  $scope.tilenames.push(\"Industry, Innovation and Infrastructure\");\n  $scope.tilenames.push(\"Reduced Inequalities\");\n  $scope.tilenames.push(\"Sustainable Cities and Communities\");\n  $scope.tilenames.push(\"Responsible Consumption and Production\");\n  $scope.tilenames.push(\"Climate Action\");\n  $scope.tilenames.push(\"Life Below Water\");\n  $scope.tilenames.push(\"Life on Land\");\n  $scope.tilenames.push(\"Peace and Justice Strong Institutions\");\n  $scope.tilenames.push(\"Partnerships for the Goals\");\n\n});\n","angular.module('bluehacks.goalcontroller', [])\n\n.controller('GoalCtrl', function ($scope, $state, $stateParams, DataService, DataLoadingService) {\n\n\t$scope.data = {};\n\t$scope.tabs = {};\n\n\t$scope.$on('$ionicView.beforeEnter', function() {\n\t\tif (!DataService.data || !DataService.data.name)\n\t\t\treturn $state.go('sidemenu.home');\n\t\tangular.extend($scope.data, DataService.data);\n\t\t// extend an empty set for loading later\n\t\tangular.extend($scope.tabs, {\n\t\t\tfbPage: [],\n\t\t\tkickstarterCharities: [],\n\t\t\tplayStoreApps: [],\n\t\t\tcommunityFeats: []\n\t\t});\n\t\t// load data in async\n\t\tDataLoadingService.loadFbPages($scope.data, $scope.tabs.fbPage);\n\t\tDataLoadingService.loadKickstarterCharities($scope.data, $scope.tabs.kickstarterCharities);\n\t\tDataLoadingService.loadPlayStoreApps($scope.data, $scope.tabs.playStoreApps)\n\t\t.then(function() {\n\t\t\tconsole.log($scope.tabs);\n\t\t});\n\t\tDataLoadingService.loadCommunityFeats($scope.data, $scope.tabs.communityFeats);\n\t});\n\n});\n","angular.module('bluehacks.landingcontrollers', [])\n\n.controller('LandingCtrl', function($scope, $state, $ionicLoading, $cordovaSQLite, $ionicPopup) {\n\n\t$scope.data = {};\n\n\t$scope.login = function(){\n    $ionicLoading.show();\n\t\tvar query = \"SELECT * FROM user WHERE username = ? AND password = ?\";\n      $cordovaSQLite.execute(db, query, [$scope.data.username, $scope.data.password]).then(function(result){\n          if(result.rows.length > 0){\n            var query2 = \"DELETE FROM current_user\";\n            $cordovaSQLite.execute(db, query2);\n            var query3 = \"INSERT INTO current_user (current_user) VALUES (?)\";\n            $cordovaSQLite.execute(db, query3, [$scope.data.username]);\n            console.log(\"SELECTED -> \" + result.rows.item(0).firstname);\n            var alertPopup = $ionicPopup.alert({\n              title: 'Welcome, ' + result.rows.item(0).username\n            });\n            $ionicLoading.hide();\n            $state.go('sidemenu.home');\n          } else{\n            console.log(\"NO ROWS EXIST\"); \n            var alertPopup = $ionicPopup.alert({\n              title: 'User does not exist'\n            });\n          }\n      }, function(error){\n          console.log(error);\n     })\n\t}\n\n\t$scope.register = function(){\n\t\t$state.go('register');\n\t}\n\n});\n","angular.module('bluehacks.registercontrollers', [])\n.controller('RegisterCtrl', function($scope, $cordovaSQLite, $ionicPopup, $ionicHistory, $state) {\n\n\t$scope.data = {};\n\n\t$scope.register = function(){\n\t\tvar query1 = \"SELECT username FROM user WHERE username = ?\";\n      $cordovaSQLite.execute(db, query1, [$scope.data.username]).then(function(result){\n        if(result.rows.length >= 1){\n          console.log(\"Record exists: \" + result.rows.item(0).username);\n          return $ionicPopup.alert({\n              title: 'User already exists. Pick another username',\n          });\n        } else{\n            var query2 = \"INSERT INTO user (username, password, firstname, lastname, occupation) VALUES (?, ?, ?, ?, ?)\";\n            $cordovaSQLite.execute(db, query2, [$scope.data.username, $scope.data.password, $scope.data.firstname, $scope.data.lastname, $scope.data.occupation]).then(function(result){\n            console.log(\"Rows affected: \" + result.rowsAffected);\n            console.log($scope.data.username + \" \" + $scope.data.password);\n            $ionicPopup.alert({\n              title: 'Registered user [' + $scope.data.username + ']'\n\t\t\t\t\t\t\t\t//' with password [' + $scope.data.password + ']'\n\t\t\t\t\t\t\t\t+ ', you may now login!'\n            }).then(function() {\n\t\t\t\t\t\t\t$state.go('landing');\n\t\t\t\t\t\t});\n            $ionicHistory.clearCache();\n      }, function(error){\n        alert(\"Error!\", error);\n        console.log(error);\n      })\n        }\n      }, function(error){\n        alert(\"Error!\", error);\n        console.log(error);\n      });\n\t}\n});\n","angular.module('bluehacks.sidemenucontrollers', [])\n\n.controller('SideMenuCtrl', function($scope, $cordovaSQLite, $ionicActionSheet, $ionicHistory) {\n\t$scope.user = {};\n\n\t$scope.$on('$ionicView.beforeEnter', function(){\n\t\tvar query = \"SELECT * FROM user INNER JOIN current_user ON user.username = current_user.current_user\";\n\t\t$cordovaSQLite.execute(db, query).then(function(result){\n\t\tconsole.log(result.rows.item(0))\n\t\t$scope.user.firstname = result.rows.item(0).firstname;\n\t\t$scope.user.lastname = result.rows.item(0).lastname;\n\t\t$scope.user.username = result.rows.item(0).username;\n\t\t$scope.user.occupation = result.rows.item(0).occupation;\n\t}, function(error){\n          console.log(error);\n    })\n\n\t})\n});\n"]}