{"version":3,"sources":["app-bundle.min.js","backend/module.js","backend/crawlers/playstore-crawler.js","backend/services/ajax.js","backend/services/response.js","register/js/register.js","sidemenu/js/sidemenu.js","landing/js/landing.js","home/js/home.js","test/js/test.js"],"names":["angular","module","service","AjaxService","baseUrl","query","arguments","search","keyword","q","HTTPConfig","$httpProvider","defaults","headers","post","transformRequest","unshift","data","key","result","hasOwnProperty","push","encodeURIComponent","join","$inject","$q","$http","ResponseService","errorCount","url","timeout","deferred","defer","method","then","resolve","good","message","noDataOnAjax","error","ajaxErrorCount","errorOnAjax","persistentErrorOnAjax","promise","config","onPasswordCreate","controller","$scope","$state","register","console","log","go","PlayStoreCrawlerService","cache","searchStores","results","JSON","stringify"],"mappings":"CAAE,WACF,YCDAA,SAAAC,OAAA,iCACAD,QAAAC,OAAA,8BAAA,+BACAD,QAAAC,OAAA,qBAAA,6BAAA,kCDKG,WACH,YERAD,SAAAC,OAAA,8BAEAC,QAAA,2BAAA,cAAA,SAAAC,GAEA,GAAAC,GAAA,4BAEA,QACAC,MAAA,SAAAC,WACA,MAAAH,GAAAC,EAAAE,YAEAC,OAAA,SAAAC,GACA,MAAAH,QAAAI,EAAAD,YFeG,WACH,YGmCA,SAAAE,GAAAC,GAIAA,EAAAC,SAAAC,QAAAC,KAAA,gBAAA,oCACAH,EAAAC,SAAAG,iBAAAC,QAAA,SAAAC,GAEA,GAAAC,GAAAC,IACA,IAAA,gBAAAF,GACA,MAAAA,EACA,KAAAC,IAAAD,GACAA,EAAAG,eAAAF,IACAC,EAAAE,KAAAC,mBAAAJ,GAAA,IAAAI,mBAAAL,EAAAC,IACA,OAAAC,GAAAI,KAAA,OA1EAb,EAAAc,SAAA,iBAAAxB,QAAAC,OAAA,8BAEAC,QAAA,eAAA,KAAA,QAAA,kBAAA,SAAAuB,EAAAC,EAAAC,GACA,GAAAC,GAAA,CACA,OAAA,UAAAC,EAAAZ,EAAAa,GACA,GAAAC,GAAAN,EAAAO,OAyBA,OAxBAN,IACAG,IAAAA,EAAA,YACAZ,KAAAA,EACAgB,OAAA,MACAH,QAAAA,GAAA,OACAI,KAAA,SAAAf,GACAS,EAAA,EACAT,GAAAA,EAAAF,KAMAc,EAAAI,QAAAhB,EAAAF,MALAc,EAAAI,SACAC,MAAA,EACAC,QAAAV,EAAAW,gBAIA,SAAAC,KACAX,EACAG,EAAAI,SACAC,MAAA,EACAC,QAAAT,GAAAD,EAAAa,eACAb,EAAAc,YACAd,EAAAe,sBACAH,MAAAA,MAGAR,EAAAY,YAIAC,OAAAlC,MHyEG,WACH,YI7GAV,SAAAC,OAAA,8BAEAC,QAAA,mBAAA,KAAA,QAAA,kBAAA,SAAAuB,EAAAC,EAAAC,GACA,OACAW,aAAA,4DACAE,eAAA,EACAC,YAAA,iEACAC,sBAAA,mBACAG,iBAAA,iFJmHG,WACH,YK5HA7C,SAAAC,OAAA,oCAEA6C,WAAA,gBAAA,SAAA,SAAAC,ULkIG,WACH,YMrIA/C,SAAAC,OAAA,oCAEA6C,WAAA,gBAAA,SAAA,SAAAC,UN2IG,WACH,YO9IA/C,SAAAC,OAAA,mCAEA6C,WAAA,eAAA,SAAA,SAAA,SAAAC,EAAAC,GAEAD,EAAAE,SAAA,WACAC,QAAAC,IAAA,WACAH,EAAAI,GAAA,mBPqJG,WACH,YQ5JApD,SAAAC,OAAA,gCAEA6C,WAAA,YAAA,SAAA,SAAAC,URkKG,WACH,YSrKA/C,SAAAC,OAAA,6BAAA,+BAEA6C,WAAA,YAAA,SAAA,0BAAA,SAAAC,EAAAM,GAGAN,EAAAO,SAEAP,EAAAQ,aAAA,SAAAlD,GACA,GAAAiD,MAAA/C,QAAAF,EAKA,MAJA0C,GAAAO,MAAA/C,OAAAF,EACAgD,EAAA9C,OAAAF,GAAA6B,KAAA,SAAAsB,GACAT,EAAAO,MAAAnC,OAAAsC,KAAAC,UAAAF,KAEAT,EAAAO,MAAAnC","file":"app-bundle.min.js","sourcesContent":[";(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend.services', []);\nangular.module('bluehacks.backend.crawlers', ['bluehacks.backend.services']); // still dependent on services\nangular.module('bluehacks.backend', ['bluehacks.backend.crawlers', 'bluehacks.backend.services']);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend.crawlers')\n\n.service('PlayStoreCrawlerService', [\"AjaxService\", function(AjaxService) {\n\n  var baseUrl = \"http://localhost:3000/api/\";\n\n  return {\n    query: function query(arguments) {\n      return AjaxService(baseUrl, arguments);\n    },\n    search: function search(keyword) {\n      return query({q: keyword});\n    }\n  };\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nHTTPConfig.$inject = [\"$httpProvider\"];angular.module('bluehacks.backend.services')\n\n.service('AjaxService', [\"$q\", \"$http\", \"ResponseService\", function($q, $http, ResponseService) {\n  var errorCount = 0;\n  return function(url, data, timeout) {\n    var deferred = $q.defer();\n    $http({\n      url: url + '.ajax.php',\n      data: data,\n      method: 'GET',\n      timeout: timeout || 7500\n    }).then(function(result) {\n      errorCount = 0;\n      if (!result || !result.data)\n        deferred.resolve({\n          good: false,\n          message: ResponseService.noDataOnAjax\n        });\n      else\n        deferred.resolve(result.data);\n    }, function(error) {\n      ++errorCount;\n      deferred.resolve({\n        good: false,\n        message: errorCount <= ResponseService.ajaxErrorCount\n          ? ResponseService.errorOnAjax\n          : ResponseService.persistentErrorOnAjax,\n        error: error\n      });\n    });\n    return deferred.promise;\n  };\n}])\n\n.config(HTTPConfig);\n\n/**\n * Configures the interception of all AJAX requests by encoding all sent data\n * to the `application/x-www-form-urlencoded` format. This is necessary\n * because the current server runs in PHP v7, which has issues with Angular's\n * default `application/json` encoding.\n *\n * One issue for this, however, is that all information sent to the server become\n * flattened. For example, sending a deep object like:\n * ```\n * {\n *   \"name\": {\n *     \"first\": \"Rico\",\n *     \"last\": \"Tiongson\"\n *    },\n *    \"age\": 3\n * }\n * ```\n * would be sent as `name=%5Bobject%20Object%5D&age=3` or something simlar.\n * To avoid this, it is recommended to use `JSON#stringify` for deeper values.\n *\n * @name      HTTPConfig\n * @ngdoc     config\n * @memberof  intellagente\n * @author    Rico Tiongson\n * @param     {provider} $httpProvider Used to connect to Angular's provider for HTTP AJAX connections.\n */\nfunction HTTPConfig($httpProvider) {\n\n  // don't use application/json\n  $httpProvider.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n  $httpProvider.defaults.transformRequest.unshift(function(data) {\n    // encode JSON data upon request\n    var key, result = [];\n    if (typeof data === \"string\")\n      return data;\n    for (key in data)\n      if (data.hasOwnProperty(key))\n        result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n    return result.join(\"&\");\n  });\n\n};\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.backend.services')\n\n.service('ResponseService', [\"$q\", \"$http\", \"ResponseService\", function($q, $http, ResponseService) {\n  return {\n    noDataOnAjax: 'No response. Make sure you are connected to the internet.',\n    ajaxErrorCount: 2,\n    errorOnAjax: 'Connection error. Make sure you are connected to the internet.',\n    persistentErrorOnAjax: 'Connection error',\n    onPasswordCreate: 'Successfully created new password. Please login with your new password.'\n  };\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.registercontrollers', [])\n\n.controller('RegisterCtrl', [\"$scope\", function($scope) {\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.sidemenucontrollers', [])\n\n.controller('SideMenuCtrl', [\"$scope\", function($scope) {\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.landingcontrollers', [])\n\n.controller('LandingCtrl', [\"$scope\", \"$state\", function($scope, $state) {\n\n  $scope.register = function(){\n    console.log(\"clicked\");\n    $state.go('register');\n  }\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.homecontrollers', [])\n\n.controller('HomeCtrl', [\"$scope\", function($scope) {\n\n}]);\n}());\n;;(function() {\n\"use strict\";\n\nangular.module('bluehacks.testcontrollers', ['bluehacks.backend.services'])\n\n.controller('TestCtrl', [\"$scope\", \"PlayStoreCrawlerService\", function($scope, PlayStoreCrawlerService) {\n  // perform search here\n\n  $scope.cache = {};\n\n  $scope.searchStores = function searchStores(query) {\n    if (cache.search != query) {\n      $scope.cache.search = query;\n      PlayStoreCrawlerService.search(query).then(function(results) {\n        $scope.cache.result = JSON.stringify(results);\n      });\n      return $scope.cache.result;\n    }\n  };\n}]);\n}());\n","angular.module('bluehacks.backend.services', []);\nangular.module('bluehacks.backend.crawlers', ['bluehacks.backend.services']); // still dependent on services\nangular.module('bluehacks.backend', ['bluehacks.backend.crawlers', 'bluehacks.backend.services']);\n","angular.module('bluehacks.backend.crawlers')\n\n.service('PlayStoreCrawlerService', function(AjaxService) {\n\n  var baseUrl = \"http://localhost:3000/api/\";\n\n  return {\n    query: function query(arguments) {\n      return AjaxService(baseUrl, arguments);\n    },\n    search: function search(keyword) {\n      return query({q: keyword});\n    }\n  };\n});\n","angular.module('bluehacks.backend.services')\n\n.service('AjaxService', function($q, $http, ResponseService) {\n  var errorCount = 0;\n  return function(url, data, timeout) {\n    var deferred = $q.defer();\n    $http({\n      url: url + '.ajax.php',\n      data: data,\n      method: 'GET',\n      timeout: timeout || 7500\n    }).then(function(result) {\n      errorCount = 0;\n      if (!result || !result.data)\n        deferred.resolve({\n          good: false,\n          message: ResponseService.noDataOnAjax\n        });\n      else\n        deferred.resolve(result.data);\n    }, function(error) {\n      ++errorCount;\n      deferred.resolve({\n        good: false,\n        message: errorCount <= ResponseService.ajaxErrorCount\n          ? ResponseService.errorOnAjax\n          : ResponseService.persistentErrorOnAjax,\n        error: error\n      });\n    });\n    return deferred.promise;\n  };\n})\n\n.config(HTTPConfig);\n\n/**\n * Configures the interception of all AJAX requests by encoding all sent data\n * to the `application/x-www-form-urlencoded` format. This is necessary\n * because the current server runs in PHP v7, which has issues with Angular's\n * default `application/json` encoding.\n *\n * One issue for this, however, is that all information sent to the server become\n * flattened. For example, sending a deep object like:\n * ```\n * {\n *   \"name\": {\n *     \"first\": \"Rico\",\n *     \"last\": \"Tiongson\"\n *    },\n *    \"age\": 3\n * }\n * ```\n * would be sent as `name=%5Bobject%20Object%5D&age=3` or something simlar.\n * To avoid this, it is recommended to use `JSON#stringify` for deeper values.\n *\n * @name      HTTPConfig\n * @ngdoc     config\n * @memberof  intellagente\n * @author    Rico Tiongson\n * @param     {provider} $httpProvider Used to connect to Angular's provider for HTTP AJAX connections.\n */\nfunction HTTPConfig($httpProvider) {\n\n  // don't use application/json\n  $httpProvider.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n  $httpProvider.defaults.transformRequest.unshift(function(data) {\n    // encode JSON data upon request\n    var key, result = [];\n    if (typeof data === \"string\")\n      return data;\n    for (key in data)\n      if (data.hasOwnProperty(key))\n        result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n    return result.join(\"&\");\n  });\n\n};\n","angular.module('bluehacks.backend.services')\n\n.service('ResponseService', function($q, $http, ResponseService) {\n  return {\n    noDataOnAjax: 'No response. Make sure you are connected to the internet.',\n    ajaxErrorCount: 2,\n    errorOnAjax: 'Connection error. Make sure you are connected to the internet.',\n    persistentErrorOnAjax: 'Connection error',\n    onPasswordCreate: 'Successfully created new password. Please login with your new password.'\n  };\n});\n","angular.module('bluehacks.registercontrollers', [])\n\n.controller('RegisterCtrl', function($scope) {\n\n});\n","angular.module('bluehacks.sidemenucontrollers', [])\n\n.controller('SideMenuCtrl', function($scope) {\n\n});\n","angular.module('bluehacks.landingcontrollers', [])\n\n.controller('LandingCtrl', function($scope, $state) {\n\n  $scope.register = function(){\n    console.log(\"clicked\");\n    $state.go('register');\n  }\n\n});\n","angular.module('bluehacks.homecontrollers', [])\n\n.controller('HomeCtrl', function($scope) {\n\n});\n","angular.module('bluehacks.testcontrollers', ['bluehacks.backend.services'])\n\n.controller('TestCtrl', function($scope, PlayStoreCrawlerService) {\n  // perform search here\n\n  $scope.cache = {};\n\n  $scope.searchStores = function searchStores(query) {\n    if (cache.search != query) {\n      $scope.cache.search = query;\n      PlayStoreCrawlerService.search(query).then(function(results) {\n        $scope.cache.result = JSON.stringify(results);\n      });\n      return $scope.cache.result;\n    }\n  };\n});\n"]}